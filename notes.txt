https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range

Sequences
    A sequence is an ordered collection of items
    The word oredered there is important.
    If a sequence wasn't ordered, you couldn't refer to individual items by their index position
    When you iterate over a sequence - using a for loop, for example - you'll always get the items in the same order

Iterables
    In Python, anything that you can iterate over is an iterable
    That means if you can use it in for loop, then it's iterable
    The accurate defintion of an iterable is that it's an object that contains either
    an _iter_ method or an _getitem_ method
    Indexing must start at zero
    All sequence types can be iterated over, and not iterables are not sequence

Lists
    It's not surprising that indexing and slicing works the same with a list as it did with a string, because they're both sequence types
    There is one big difference between strings and lists: strings are immutable, which means they can't be changed.
    Lists are mutable. You can change the contents of a lists

Immutable objects
    When an object is described as immutable, that means it can't be changed
    The following immutable types are built into Python:
        int
        float
        bool (True and False): a subclass of int
        str (string)
        tuple
        frozenset
        bytes
    The documentation doesn't state that it should be object's address, just that it must be "guaranteed to be unique and constant for this object during its lifetime"
    The CPython implementation does return the object's memory address, but not all Pythons will do that
    The ID for an object may be different each time you run the prgramhttps://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range

Sequences
    A sequence is an ordered collection of items
    The word oredered there is important.
    If a sequence wasn't ordered, you couldn't refer to individual items by their index position
    When you iterate over a sequence - using a for loop, for example - you'll always get the items in the same order

Iterables
    In Python, anything that you can iterate over is an iterable
    That means if you can use it in for loop, then it's iterable
    The accurate defintion of an iterable is that it's an object that contains either
    an _iter_ method or an _getitem_ method
    Indexing must start at zero
    All sequence types can be iterated over, and not iterables are not sequence

Lists
    It's not surprising that indexing and slicing works the same with a list as it did with a string, because they're both sequence types
    There is one big difference between strings and lists: strings are immutable, which means they can't be changed.
    Lists are mutable. You can change the contents of a lists

Immutable objects
    When an object is described as immutable, that means it can't be changed
    The following immutable types are built into Python:
        int
        float
        bool (True and False): a subclass of int
        str (string)
        tuple
        frozenset
        bytes
    The documentation doesn't state that it should be object's address, just that it must be "guaranteed to be unique and constant for this object during its lifetime"
    The CPython implementation does return the object's memory address, but not all Pythons will do that
    The ID for an object may be different each time you run the prgram

Mutable Objects
    A mutable object is one whose value can be changed.
    Python has the following mutable objects built in:
        List
        Dict
        Set
        Bytearray
    We'll be looking at dictionaries and sets in the next section
    We can change the value of mutable objects, without
    Strings are immutable. When we tried to change a string, Python created a new object
    Lists are mutable
    An immutable object can't be changed. You can create a new object, and use the same variable name for it, but you can't change the value of an immutable object

Methods and Functions
    A method is the same as a function, except that it's bound to an object
    When you call a function, you just type its name, and provide any arguments in parentheses

Dot Notation
    s.append(x)
    This means that we'll be appending x to a list called s
    We pass x as an argument, so that the method knows what to append
    But we don't have to use an argument to tell it which list to append to, because that comes at the start, before the dot

Enumerate
    Enumerate returns each item, with its index position
    Can use enumerate with any featurable type

List
    variable.extend(variable) adds the (variable) list to the variable list
    variable.sort() sorts the lists that has been combined

Built-in Functions
    Python has a documentation page that includes all of the built-in functions that Python offers
    sorted returns a new list and .sort sorts the original list

Edge Case
    Internet browers are indispensible

Corner Cases
    If you're dealing with ratios, and both values are zero, then you've got the same amount of each
    You may want to handle that differently, rather than returning "undefined".
    It's very important to consider things like that, and make sure your code copes correctly
    At the very least, it shouldn't crash or produce unexpected results

Test Cases
    So, what are the cases we need to consider?
    We should test our code with data that meets the following criteria:
        Outlying values at both the low and high ends
        Outlying values at the low end only
        Outlying values at the high end only
        Only outlying values

Lists:
    Lists are mutable sequences, typically used to store homogenous items, but you are free to store anything but need to be careful when working
    on the list

Tuples:
    A tuple is a mathematical name for an ordered set of data.
    Tuples differ from list because they are immutable, meaning they cannot be changed.
    Python3.8 added assignment expression to the language - in PEP 572. They use what's informally reffered to as the walrus operator
    List is [], while tuple is ()

